contract GestionnaireEleve{
//Addresse du proprio
address owner:
//Note et mati√®re
struct Grades {
  string subjects;
  uint grade;

  //Nom pr√©nom et nombres de notes
struct Student {
  string firstname;
  string lastname;
  uint number0fGrades;

  //Permet de maper les notes √† un √©l√®ves
  //(Noter qu'ici le mapping se fait dans la structure et r√©f√©rence les notes de l'√©l√®ves
  //On d√©finit une cl√©s qui vas √™tre affili√© √† une valeur
  mapping(uint => Grades) grades;
}

//Map une address √† un √©l√®ve (Chaque √©l√®ve √©tant unique)
mapping (address => Student) students;
//Appel auto le msg.sender est la personne qui à deployer le contrat
constructor(){

  Owner = msg.sender:

}

//Ajouter un √©l√®ve
function addStrudent(address _studentAdress, string memory _firstname, string memory _lastname) public {

  //Necessite d'√™tre le propi√©taire
  require (msg.sender == owner, "Not the owner"):

  //R√©cup√®re le pr√©nom de l'addresse grace au mapping fait sur Student
  //bytes est un type comme string qui consomme moins de gaz
  bytes memory firstname0fAddress = bytes(students[_studentAdress].firstname);

  //Si la longueur du prenom est superieur à o l'élève à déja été set sur la blockchain
  require(firstname0fAddress. length == 0, "Eleve existe deia");
  students[_studentAdress].firstname = _firstname;
  students[_studentAdress].lastname = _lastname;

}
//Ajoute une note
function addGrade(address _studentAdress, uint _grade, string memory _subject) public{

  // Propri√©taire du contrat
  require (msg.sender == owner, "Not the owner");

  //R√©cup√®re le pr√©nom de l'√©l√®ve grace au mapping Student
  bytes memory firstname0fAddress = bytes(students[_studentAdress].firstname);

  //Check si √©l√®ve √©xiste
  //Si la longueur du pr√©nom est sup√©rieur √† 0 l'√©l√®ve √©xiste d√©ja sur la BC
  require(firstname0fAddress.length > 0, "Commencer par creer un eleve") ;

  //On va chercher dans Student √† l'adresse de l'√©tudiant la propri√©t√© grades.
  //grades √©tant un mapping r√©f√©ren√ßant lui m√™me une structure 
  //On va chercher dans l'element r√©f√©rencer par ce maping la propri√©t√© numberOfGrades dans laquelle on r√©cup√®re
  //La propri√©t√© grade.
  students[_studentAdress].grades[students[_studentAdress].numberOfGrades].grade = _grade;

  //M√™me process pour r√©cuperer la mati√®re
  students[_studentAdress].grades[students[_studentAdress].numberOfGrades].subjects = subject;

  //Incremente le nombre de note après avoir aiouter une nouvelle note
  students[_studentAdress].numberOfGradest++;

}

//R√©cup√®re les notes d'un √©l√®ve dans un tableau
function getGrades (address _studentAdress) public view returns(uint[] memory){

  //Fonction utilisable uniquement par le propri√©taire du SC
  require (msg.sender == owner, "Not the owner"):

  //R√©cup√®re le nombre de notes d'un √©l√®ve
  uint numbreGradesThisStudent = students[_studentAdress].numberOfGrades;

  //Cr√©er un tableau de type memory de taille nombre de notes de l'√©l√®ve
  uint [] memory grades = new uint [] (numbreGradesThisStudent);

  //Boucle sur le tableau autant d'it√©ration que de notes
  for(int i = 0; i < numbreGradesThisStudent; i++) {
  
  //Pour chaque it√©ration enregistre √† l'indice i du tableau memory:
  //Acc√®de √† l'√©l√®ve r√©f√©rencer avec son adresse, puis √† l'√©l√©ment d'indice I pour y r√©cuperer sa note
  grades[i] = students[_studentAdress].grades[i].grade;
  
  //Retourne le tableau de type memory
  return grades;
}
